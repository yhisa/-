{"version":3,"sources":["images lazy /^/.//.*$/ groupOptions: {} namespace object","components/BottomLeftImages.tsx","components/CityBoundary.tsx","components/OverlayFeatureLayers.tsx","components/OverlayTileLayers.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","BottomLeftImages","imageNames","collapsed","useState","images","setImages","open","setOpen","useEffect","a","all","imageName","title","replace","image","src","default","importedImages","className","Button","variant","onClick","Collapse","in","Card","style","width","Header","as","Img","CityBoundary","cityOsm","boundaryFeature","osmtogeojson","features","find","feature","toString","startsWith","GeoJSON","data","fillOpacity","attribution","iconColors","FeaturePopup","properties","name","entries","filter","key","val","OverlayFeatureLayers","featureCollections","i","featureCollection","iconColor","length","icon","Icon","Default","iconUrl","iconRetinaUrl","LayersControl","Overlay","pointToLayer","pointFeature","latlng","Marker","bindPopup","ReactDOMServer","renderToString","OverlayTileLayers","tiles","tile","TileLayer","url","opacity","App","bounds","elements","latLngBounds","LatLngBounds","minlat","minlon","maxlat","maxlon","Helmet","config","city","MapContainer","maxBounds","minZoom","maxZoom","height","ScaleControl","position","window","innerWidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.292791bb.chunk.js","sourcesContent":["var map = {\n\t\"./浸水深凡例.png\": [\n\t\t60,\n\t\t4\n\t],\n\t\"./浸水継続時間凡例.png\": [\n\t\t61,\n\t\t5\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 50;\nmodule.exports = webpackAsyncContext;","import { useEffect, useState } from \"react\";\nimport { Button, Card, Collapse } from \"react-bootstrap\";\n\ntype Props = {\n  imageNames: string[];\n  collapsed: boolean;\n};\n\nexport function BottomLeftImages({ imageNames, collapsed }: Props) {\n  const [images, setImages] = useState<{ title: string; src: string }[]>([]);\n  const [open, setOpen] = useState(!collapsed);\n\n  useEffect(() => {\n    (async () => {\n      const importedImages = await Promise.all(\n        imageNames.map(async (imageName) => {\n          const title = imageName.replace(/\\.[^.]+$/, \"\");\n          const image = await import(`../images/${imageName}`);\n          return { title: title, src: image.default };\n        })\n      );\n      setImages(importedImages);\n    })();\n  }, [imageNames]);\n\n  return (\n    <div className=\"leaflet-bottom leaflet-left\">\n      <div className=\"leaflet-control\">\n        <Button\n          variant=\"light\"\n          onClick={() => setOpen(!open)}\n          aria-controls=\"collapse-images\"\n          aria-expanded={open}\n          className=\"mb-1\"\n        >\n          {open ? \"説明を隠す\" : \"説明を表示\"}\n        </Button>\n        <Collapse in={open}>\n          <div id=\"collapse-images\">\n            <div className=\"d-flex align-items-start flex-wrap\">\n              {images.map(({ title, src }) => (\n                <Card\n                  key={title}\n                  className=\"shadow opacity-75 me-1 mb-1\"\n                  style={{ width: \"12rem\" }}\n                >\n                  <Card.Header as=\"h2\" className=\"h6 text-center\">\n                    {title}\n                  </Card.Header>\n                  <Card.Img variant=\"bottom\" src={src} />\n                </Card>\n              ))}\n            </div>\n          </div>\n        </Collapse>\n      </div>\n    </div>\n  );\n}\n","import { FeatureCollection } from \"geojson\";\nimport osmtogeojson from \"osmtogeojson\";\nimport { GeoJSON } from \"react-leaflet\";\n\ntype Props = {\n  cityOsm: any;\n};\n\nexport function CityBoundary({ cityOsm }: Props) {\n  const cityGeoJSON = osmtogeojson(cityOsm) as FeatureCollection;\n  const boundaryFeature = cityGeoJSON.features.find((feature) =>\n    feature.id?.toString()?.startsWith(\"relation/\")\n  );\n\n  if (!boundaryFeature) return null;\n\n  return (\n    <GeoJSON\n      data={boundaryFeature}\n      style={{ fillOpacity: 0 }}\n      attribution='<a href=\"http://osm.org/copyright\">OpenStreetMap</a>'\n    />\n  );\n}\n","import { Feature, FeatureCollection } from \"geojson\";\nimport { Icon, Marker } from \"leaflet\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { GeoJSON, LayersControl } from \"react-leaflet\";\n\ntype Props = {\n  featureCollections: {\n    [name: string]: FeatureCollection;\n  };\n};\n\nconst iconColors = [\n  \"blue\",\n  \"gold\",\n  \"red\",\n  \"green\",\n  \"orange\",\n  \"yellow\",\n  \"violet\",\n  \"gray\",\n  \"black\",\n];\n\nfunction FeaturePopup({ feature }: { feature: Feature }) {\n  return (\n    <>\n      <h2 className=\"h6 text-center\">{feature.properties?.name}</h2>\n      <ul className=\"list-unstyled\">\n        {feature.properties &&\n          Object.entries(feature.properties)\n            .filter(([key, _]) => key !== \"name\")\n            .map(([key, val]) => (\n              <li>\n                <b>{key}</b>: {val}\n              </li>\n            ))}\n      </ul>\n    </>\n  );\n}\n\nexport function OverlayFeatureLayers({ featureCollections }: Props) {\n  return (\n    <>\n      {Object.entries(featureCollections).map(\n        ([name, featureCollection], i) => {\n          const iconColor = iconColors[i % iconColors.length];\n          const icon = new Icon.Default({\n            iconUrl: `https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-${iconColor}.png`,\n            iconRetinaUrl: `https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-${iconColor}.png`,\n          });\n\n          return (\n            <LayersControl.Overlay key={name} name={name}>\n              <GeoJSON\n                data={featureCollection}\n                pointToLayer={(pointFeature, latlng) => {\n                  return new Marker(latlng, { icon: icon }).bindPopup(\n                    // https://stackoverflow.com/a/60686195\n                    ReactDOMServer.renderToString(\n                      <FeaturePopup feature={pointFeature} />\n                    )\n                  );\n                }}\n              />\n            </LayersControl.Overlay>\n          );\n        }\n      )}\n    </>\n  );\n}\n","import { LayersControl, TileLayer } from \"react-leaflet\";\n\ntype Props = {\n  tiles: {\n    name: string;\n    url: string;\n    attribution: string;\n    opacity?: number;\n  }[];\n};\n\nexport function OverlayTileLayers({ tiles }: Props) {\n  return (\n    <>\n      {tiles.map((tile) => {\n        return (\n          <LayersControl.Overlay key={tile.name} name={tile.name}>\n            <TileLayer\n              url={tile.url}\n              opacity={tile.opacity || 0.75}\n              attribution={tile.attribution}\n            />\n          </LayersControl.Overlay>\n        );\n      })}\n    </>\n  );\n}\n","import { LatLngBounds } from \"leaflet\";\nimport \"leaflet-defaulticon-compatibility\";\nimport \"leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.webpack.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport { Helmet } from \"react-helmet\";\nimport {\n  LayersControl,\n  MapContainer,\n  ScaleControl,\n  TileLayer,\n} from \"react-leaflet\";\nimport { BottomLeftImages } from \"./components/BottomLeftImages\";\nimport { CityBoundary } from \"./components/CityBoundary\";\nimport { OverlayFeatureLayers } from \"./components/OverlayFeatureLayers\";\nimport { OverlayTileLayers } from \"./components/OverlayTileLayers\";\nimport cityOsm from \"./generated/city-osm.json\";\nimport featureCollections from \"./generated/feature-collections.json\";\nimport config from \"./generated/hazardmap-config.json\";\nimport imageNames from \"./generated/image-names.json\";\n\nconst breakpoint = 768;\n\nfunction App() {\n  const bounds = cityOsm.elements[0].bounds;\n  const latLngBounds = new LatLngBounds(\n    [bounds.minlat, bounds.minlon],\n    [bounds.maxlat, bounds.maxlon]\n  );\n\n  return (\n    <>\n      <Helmet>\n        <title>{config.city}ハザードマップ</title>\n      </Helmet>\n\n      <MapContainer\n        bounds={latLngBounds}\n        maxBounds={latLngBounds}\n        minZoom={5}\n        maxZoom={17}\n        style={{ height: \"100vh\" }}\n      >\n        <TileLayer\n          url=\"https://cyberjapandata.gsi.go.jp/xyz/pale/{z}/{x}/{y}.png\"\n          attribution='<a href=\"https://maps.gsi.go.jp/development/ichiran.html\">国土地理院</a>'\n        />\n        <ScaleControl position=\"bottomright\" />\n        <CityBoundary cityOsm={cityOsm} />\n        <LayersControl\n          position=\"topright\"\n          collapsed={window.innerWidth <= breakpoint}\n        >\n          <OverlayTileLayers tiles={config.tiles} />\n          <OverlayFeatureLayers\n            // @ts-ignore\n            featureCollections={featureCollections}\n          />\n        </LayersControl>\n        <BottomLeftImages\n          imageNames={imageNames}\n          collapsed={window.innerWidth <= breakpoint}\n        />\n      </MapContainer>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}